name: DGC-AutoBuild (YPSH)

on:
  release:
    types: [published]

jobs:
  build-PY:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.release.tag_name || github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Generate ypsh-release.py
        shell: bash
        run: |
          python for-autobuild.py ${{ github.event.release.tag_name || github.ref }}

      - name: Rename Python Script
        shell: bash
        run: |
          mv ypsh-release.py YPSH-python-3.py

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: YPSH-python-3.py
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

  build-AMD64:
    needs: build-PY
    continue-on-error: true
    strategy:
      matrix:
        include:
          - os: macos-13
            platform: macOS Intel
            filename: YPSH-macos-amd64
          - os: ubuntu-22.04
            platform: Linux Intel/AMD
            filename: YPSH-linux-amd64
          - os: windows-2022
            platform: Windows Intel/AMD
            filename: YPSH-windows-amd64
    runs-on: ${{ matrix.os }}

    steps:
      - name: Notify build start (pending)
        shell: bash
        run: |
          curl -X POST ${{ secrets.BUILD_URL }} \
            -H "Content-Type: application/json" \
            -d '{
              "version": "${{ github.event.release.tag_name || github.ref_name }}",
              "platform": "${{ matrix.platform }}",
              "status": "pending",
              "progress": 0,
              "product": "YPSH"
            }'

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.release.tag_name || github.ref }}

      - name: Notify progress 5%
        shell: bash
        run: |
          curl -X POST ${{ secrets.BUILD_URL }} \
            -H "Content-Type: application/json" \
            -d '{
              "version": "${{ github.event.release.tag_name || github.ref_name }}",
              "platform": "${{ matrix.platform }}",
              "status": "in_progress",
              "progress": 5,
              "product": "YPSH"
            }'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Notify progress 10%
        shell: bash
        run: |
          curl -X POST ${{ secrets.BUILD_URL }} \
            -H "Content-Type: application/json" \
            -d '{
              "version": "${{ github.event.release.tag_name || github.ref_name }}",
              "platform": "${{ matrix.platform }}",
              "status": "in_progress",
              "progress": 10,
              "product": "YPSH"
            }'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller ordered-set zstandard pefile

      - name: Notify progress 20%
        shell: bash
        run: |
          curl -X POST ${{ secrets.BUILD_URL }} \
            -H "Content-Type: application/json" \
            -d '{
              "version": "${{ github.event.release.tag_name || github.ref_name }}",
              "platform": "${{ matrix.platform }}",
              "status": "in_progress",
              "progress": 20,
              "product": "YPSH"
            }'

      - name: Generate ypsh-release.py
        shell: bash
        run: |
          python for-autobuild-dl.py ${{ github.event.release.tag_name || github.ref }}

      - name: Notify progress 25%
        shell: bash
        run: |
          curl -X POST ${{ secrets.BUILD_URL }} \
            -H "Content-Type: application/json" \
            -d '{
              "version": "${{ github.event.release.tag_name || github.ref_name }}",
              "platform": "${{ matrix.platform }}",
              "status": "in_progress",
              "progress": 25,
              "product": "YPSH"
            }'

      - name: Build with PyInstaller
        shell: bash
        run: |
          pyinstaller --onefile --distpath dist --name ypsh-release ypsh-release.py

      - name: Notify progress 70%
        shell: bash
        run: |
          curl -X POST ${{ secrets.BUILD_URL }} \
            -H "Content-Type: application/json" \
            -d '{
              "version": "${{ github.event.release.tag_name || github.ref_name }}",
              "platform": "${{ matrix.platform }}",
              "status": "in_progress",
              "progress": 70,
              "product": "YPSH"
            }'

      - name: Rename binary, Zip (non-Windows)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          mkdir upload
          filename="${{ matrix.filename }}"
          mv dist/ypsh-release "upload/${filename}"
          cd upload
          zip "${filename}.zip" "${filename}"

      - name: Rename binary (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $filename = "${{ matrix.filename }}"
          mkdir upload
          Move-Item -Path dist/ypsh-release.exe -Destination "upload/$filename.exe"

      - name: Zip (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $filename = "${{ matrix.filename }}"
          Compress-Archive -Path "upload/$filename.exe" -DestinationPath "upload/$filename.zip"

      - name: Notify progress 80%
        shell: bash
        run: |
          curl -X POST ${{ secrets.BUILD_URL }} \
            -H "Content-Type: application/json" \
            -d '{
              "version": "${{ github.event.release.tag_name || github.ref_name }}",
              "platform": "${{ matrix.platform }}",
              "status": "in_progress",
              "progress": 80,
              "product": "YPSH"
            }'

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: upload/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

      - name: Notify success
        if: success()
        shell: bash
        run: |
          curl -X POST ${{ secrets.BUILD_URL }} \
            -H "Content-Type: application/json" \
            -d '{
              "version": "${{ github.event.release.tag_name || github.ref_name }}",
              "platform": "${{ matrix.platform }}",
              "status": "completed",
              "progress": 100,
              "product": "YPSH"
            }'

      - name: Notify failure
        if: failure()
        shell: bash
        run: |
          curl -X POST ${{ secrets.BUILD_URL }} \
            -H "Content-Type: application/json" \
            -d '{
              "version": "${{ github.event.release.tag_name || github.ref_name }}",
              "platform": "${{ matrix.platform }}",
              "status": "failed",
              "progress": 100,
              "product": "YPSH"
            }'

  build-ARM64:
    needs: build-PY
    continue-on-error: true
    strategy:
      matrix:
        include:
          - os: macos-14
            platform: macOS Apple Silicon
            filename: YPSH-macos-arm64
          - os: ubuntu-22.04-arm
            platform: Linux ARM
            filename: YPSH-linux-arm64
          - os: windows-11-arm
            platform: Windows ARM
            filename: YPSH-windows-arm64
    runs-on: ${{ matrix.os }}

    steps:
      - name: Notify build start (pending)
        shell: bash
        run: |
          curl -X POST ${{ secrets.BUILD_URL }} \
            -H "Content-Type: application/json" \
            -d '{
              "version": "${{ github.event.release.tag_name || github.ref_name }}",
              "platform": "${{ matrix.platform }}",
              "status": "pending",
              "progress": 0,
              "product": "YPSH"
            }'

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.release.tag_name || github.ref }}

      - name: Notify progress 5%
        shell: bash
        run: |
          curl -X POST ${{ secrets.BUILD_URL }} \
            -H "Content-Type: application/json" \
            -d '{
              "version": "${{ github.event.release.tag_name || github.ref_name }}",
              "platform": "${{ matrix.platform }}",
              "status": "in_progress",
              "progress": 5,
              "product": "YPSH"
            }'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Notify progress 10%
        shell: bash
        run: |
          curl -X POST ${{ secrets.BUILD_URL }} \
            -H "Content-Type: application/json" \
            -d '{
              "version": "${{ github.event.release.tag_name || github.ref_name }}",
              "platform": "${{ matrix.platform }}",
              "status": "in_progress",
              "progress": 10,
              "product": "YPSH"
            }'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller ordered-set zstandard pefile

      - name: Notify progress 20%
        shell: bash
        run: |
          curl -X POST ${{ secrets.BUILD_URL }} \
            -H "Content-Type: application/json" \
            -d '{
              "version": "${{ github.event.release.tag_name || github.ref_name }}",
              "platform": "${{ matrix.platform }}",
              "status": "in_progress",
              "progress": 20,
              "product": "YPSH"
            }'

      - name: Generate ypsh-release.py
        shell: bash
        run: |
          python for-autobuild-dl.py ${{ github.event.release.tag_name || github.ref }}

      - name: Notify progress 25%
        shell: bash
        run: |
          curl -X POST ${{ secrets.BUILD_URL }} \
            -H "Content-Type: application/json" \
            -d '{
              "version": "${{ github.event.release.tag_name || github.ref_name }}",
              "platform": "${{ matrix.platform }}",
              "status": "in_progress",
              "progress": 25,
              "product": "YPSH"
            }'

      - name: Build with PyInstaller
        shell: bash
        run: |
          pyinstaller --onefile --distpath dist --name ypsh-release ypsh-release.py

      - name: Notify progress 70%
        shell: bash
        run: |
          curl -X POST ${{ secrets.BUILD_URL }} \
            -H "Content-Type: application/json" \
            -d '{
              "version": "${{ github.event.release.tag_name || github.ref_name }}",
              "platform": "${{ matrix.platform }}",
              "status": "in_progress",
              "progress": 70,
              "product": "YPSH"
            }'

      - name: Rename binary, Zip (non-Windows)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          mkdir upload
          filename="${{ matrix.filename }}"
          mv dist/ypsh-release "upload/${filename}"
          cd upload
          zip "${filename}.zip" "${filename}"

      - name: Rename binary (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $filename = "${{ matrix.filename }}"
          mkdir upload
          Move-Item -Path dist/ypsh-release.exe -Destination "upload/$filename.exe"

      - name: Zip (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $filename = "${{ matrix.filename }}"
          Compress-Archive -Path "upload/$filename.exe" -DestinationPath "upload/$filename.zip"

      - name: Notify progress 80%
        shell: bash
        run: |
          curl -X POST ${{ secrets.BUILD_URL }} \
            -H "Content-Type: application/json" \
            -d '{
              "version": "${{ github.event.release.tag_name || github.ref_name }}",
              "platform": "${{ matrix.platform }}",
              "status": "in_progress",
              "progress": 80,
              "product": "YPSH"
            }'

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: upload/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

      - name: Notify success
        if: success()
        shell: bash
        run: |
          curl -X POST ${{ secrets.BUILD_URL }} \
            -H "Content-Type: application/json" \
            -d '{
              "version": "${{ github.event.release.tag_name || github.ref_name }}",
              "platform": "${{ matrix.platform }}",
              "status": "completed",
              "progress": 100,
              "product": "YPSH"
            }'

      - name: Notify failure
        if: failure()
        shell: bash
        run: |
          curl -X POST ${{ secrets.BUILD_URL }} \
            -H "Content-Type: application/json" \
            -d '{
              "version": "${{ github.event.release.tag_name || github.ref_name }}",
              "platform": "${{ matrix.platform }}",
              "status": "failed",
              "progress": 100,
              "product": "YPSH"
            }'

  after:
    needs: [build-AMD64, build-ARM64]
    runs-on: ubuntu-22.04
    if: ${{ success() && github.event_name == 'release' }}

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v3
        with:
          ref: main
          token: ${{ secrets.GH_PAT }}

      - name: Set up Git
        run: |
          git config user.name "DGC-AutoBuild"
          git config user.email "bot@diamondgotcat.net"

      - name: Update release channels
        shell: bash
        run: |
          tag="${{ github.event.release.tag_name }}"
          mkdir -p channels
          echo "$tag" > channels/beta.txt

          if [[ "${{ github.event.release.prerelease }}" == "false" ]]; then
            echo "$tag" > channels/stable.txt
          fi

          git add channels/beta.txt
          if [[ "${{ github.event.release.prerelease }}" == "false" ]]; then
            git add channels/stable.txt
          fi

          git commit -m "Update release channels to $tag" || echo "No changes to commit"
          git remote set-url origin https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }}
          git push origin HEAD:main
